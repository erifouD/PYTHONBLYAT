from math import sqrt #импортирование функции квадратного корня из библиотеки math

def Task7(): #Объявление функции задания №7
#Даны три стороны одного треугольника и три стороны другого треугольника. Определить, будут ли эти
#треугольники равновеликими, т. е. имеют ли они равные площади. Вывести «ДА» или «НЕТ»
    print("Задание 7")
    a = [] #Список сторон треугольника А
    b = [] #Список сторон треугольника B
    for i in range(3): #Цикл запроса длин сторон треугольника А, повторяется 3 раза
        #Добавление в конец списка новой стороны, полученной с ввода с клавиатуры (типа float)
        a.append(float(input(f"Введите {i+1}-ю сторону первого треугольника: ")))

    for i in range(3): #Цикл запроса длин сторон треугольника B, повторяется 3 раза
        #Добавление в конец списка новой стороны, полученной с ввода с клавиатуры (типа float)
        b.append(float(input(f"Введите {i+1}-ю сторону второго треугольника: ")))

    #Дальнейшие вычисления производятся по формуле Герона
    p1 = (a[0] + a[1] + a[2]) / 2 #Вычисление полупериметра треугольника А
    S1 = sqrt(p1 * (p1 - a[0]) * (p1 - a[1]) * (p1 - a[2])) #Вычисление площади треуг. А по формуле Герона

    p2 = (b[0] + b[1] + b[2]) / 2 #Вычисление полупериметра треугольника В
    S2 = sqrt(p2 * (p2 - b[0]) * (p2 - b[1]) * (p2 - b[2])) #Вычисление площади треуг. В по формуле Герона

    if S1 == S2:
        #Условие: Если площадь треугольника А (S1) равна
        #площади треугольника В(S2), то
        print("Площади треугольников равны") #Вывести данный текст
    else: #Иначе
        print("Площади треугольников не равны") #Вывести это



def Task13(): #Объявление функции задания №13
#Определить, существует ли прямоугольный треугольник со сторонами x,y,z. 
#Если – да, вычислить его площадь. Если - нет, вычислить его периметр.
    print("Задание 13")
    TriangleSidesList = [] #Объявление списка сторон треугольника

    for i in range(3): #Цикл ввода сторон треугольника (3 итерации)
        #Добавление в конец списка новой стороны, полученной с ввода с клавиатуры (типа float)
        TriangleSidesList.append(float(input(f"Введите {i+1}-ю сторону треугольника: ")))

    #Объявление переменной гипотенузы (максимальная сторона по длине в списке)
    Hypotenuse = max(TriangleSidesList)

    #Удаление гипотенузы из списка по индексу, который узнается по функции index
    #Таким образом в списке остаются только катеты
    TriangleSidesList.pop(TriangleSidesList.index(Hypotenuse))
    

    #Условие: Если сумма квадратов катетов равна квадрату гипотенузы, то треугольник
    #прямоугольный (Теорема Пифагора)
    if (TriangleSidesList[0] ** 2 + TriangleSidesList[1] ** 2) == Hypotenuse ** 2:
        #Если условие выше истина, вывести площадь треугольника 1/2 * (a * b) == a * b / 2
        print("Площадь треугольника: ", TriangleSidesList[0] * TriangleSidesList[1] / 2)
    else: #Иначе вывести периметр треугольника (Катет1 + Катет2 + Гипотенуза)
        print("Периметр: ", TriangleSidesList[0] + TriangleSidesList[1] + Hypotenuse)


Task7() #Вызов функции задания №7
print("=====================================================================")
Task13() #Вызов функции задания №13
